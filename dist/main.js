/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("//http://api.weatherapi.com/v1/current.json?key=6b1d1ff3871e4566a6c62703233006&q=Sydney// current weather\r\n// http://api.weatherapi.com/v1/forecast.json?key=6b1d1ff3871e4566a6c62703233006&q=Sydney&days=7 //forecast 14days\r\n// https://api.weatherapi.com/v1/search.json?key=6b1d1ff3871e4566a6c62703233006&q=Sydney //search (shows relevant names)\r\n\r\nlet celsius = true;\r\n\r\nfunction convertTemperature(temperature) {\r\n  if (!celsius) {\r\n    temperature = ((temperature - 32) * 5) / 9; //convert to C\r\n  } else {\r\n    temperature = (temperature * 9) / 5 + 32; //convert to F;\r\n  }\r\n  return temperature.toFixed(1);\r\n}\r\n\r\nasync function getWeather(location) {\r\n  try {\r\n    const response = await fetch(\r\n      `http://api.weatherapi.com/v1/forecast.json?key=6b1d1ff3871e4566a6c62703233006&q=${location}&days=7`,\r\n      { mode: 'cors' }\r\n    );\r\n    const data = await response.json();\r\n    let currentLocationData = processLocationData(data.location);\r\n    let currentWeatherData = processCurrentWeather(data);\r\n    let weatherForecast = processFutureWeather(data.forecast.forecastday);\r\n    let hourlyForecast = processHourlyWeather(\r\n      data.forecast.forecastday[0].hour\r\n    );\r\n    return {\r\n      currentWeatherData,\r\n      currentLocationData,\r\n      weatherForecast,\r\n      hourlyForecast,\r\n    };\r\n  } catch (error) {\r\n    console.error(error);\r\n    const errorMessage = `Error getting weather for \"${location}\": ${error.message}.`;\r\n    console.error(errorMessage);\r\n  }\r\n}\r\n\r\nfunction processCurrentWeather(data) {\r\n  let weatherData = {\r\n    temp: data.current.temp_c,\r\n    feelsLikeTemp: data.current.feelslike_c,\r\n    minTemp: data.forecast.forecastday[0].day.mintemp_c,\r\n    maxTemp: data.forecast.forecastday[0].day.maxtemp_c,\r\n    condition: data.current.condition.text,\r\n    conditionImg: data.current.condition.icon,\r\n    humidity: data.current.humidity,\r\n  };\r\n  return weatherData;\r\n}\r\n\r\nfunction processFutureWeather(data) {\r\n  let forecast = {};\r\n  for (let i = 0; i < 7; i++) {\r\n    forecast[`day${i}`] = {\r\n      date: data[i].date,\r\n      maxTemp: data[i].day.maxtemp_c,\r\n      minTemp: data[i].day.mintemp_c,\r\n      avgTemp: data[i].day.avgtemp_c,\r\n      totalPrecip: data[i].day.totalprecip_mm,\r\n      avgHumidity: data[i].day.avghumidity,\r\n      dailyWillItRain: data[i].day.daily_will_it_rain,\r\n      dailyChanceOfRain: data[i].day.daily_chance_of_rain,\r\n      uvIndex: data[i].day.uv,\r\n      condition: data[i].day.condition,\r\n    };\r\n  }\r\n  return forecast;\r\n}\r\n\r\nfunction processHourlyWeather(data) {\r\n  let hourlyForecast = {};\r\n  for (let i = 0; i < 24; i++) {\r\n    let date = new Date(data[i].time);\r\n    let hours = date.getHours();\r\n    let minutes = date.getMinutes();\r\n    if (hours.toString().length === 1) {\r\n      hours = '0' + date.getHours();\r\n    }\r\n    if (minutes.toString().length === 1) {\r\n      minutes = '0' + date.getMinutes();\r\n    }\r\n    let time = `${hours}:${minutes}`;\r\n\r\n    hourlyForecast[i] = {\r\n      time: time,\r\n      condition: data[i].condition.icon,\r\n      temperature: data[i].temp_c,\r\n    };\r\n  }\r\n  return hourlyForecast;\r\n}\r\n\r\nfunction processLocationData(data) {\r\n  let locationData = {\r\n    country: data.country,\r\n    name: data.name,\r\n    region: data.region,\r\n  };\r\n  return locationData;\r\n}\r\n\r\n// DOM related functions\r\n\r\nconst searchForm = document.querySelector('[data-search-form]');\r\nconst searchInput = document.querySelector('[data-search-input]');\r\nconst tempConverter = document.querySelector('[data-temperature-conversion]');\r\n\r\n//using input to create weather\r\nsearchForm.addEventListener('submit', async (e) => {\r\n  e.preventDefault();\r\n  if (document.contains(document.querySelector('.weather-card'))) {\r\n    document.querySelector('.weather-card').remove();\r\n  }\r\n  if (document.contains(document.querySelector('.week__container'))) {\r\n    document.querySelector('.week__container').remove();\r\n  }\r\n  if (document.contains(document.querySelector('.hourly__container'))) {\r\n    document.querySelector('.hourly__container').remove();\r\n  }\r\n  const {\r\n    currentWeatherData,\r\n    currentLocationData,\r\n    weatherForecast,\r\n    hourlyForecast,\r\n  } = await getWeather(searchInput.value);\r\n  createWeatherInfo(currentWeatherData, currentLocationData);\r\n  createHourlyForecastInfo(hourlyForecast);\r\n  createForecastInfo(weatherForecast);\r\n  searchInput.value = '';\r\n});\r\n\r\ntempConverter.addEventListener('click', (e) => {\r\n  let temperatures = document.querySelectorAll('.temp');\r\n  let units = document.querySelectorAll('.metric__imperial');\r\n  temperatures.forEach((temp) => {\r\n    temp.innerText = convertTemperature(temp.innerText);\r\n  });\r\n  units.forEach((unit) => {\r\n    if (unit.innerText === '¬∞C') {\r\n      unit.innerText = '¬∞F';\r\n    } else {\r\n      unit.innerText = '¬∞C';\r\n    }\r\n  });\r\n  celsius = !celsius;\r\n});\r\n\r\n//creating current weather information using template\r\nfunction createWeatherInfo(weatherData, locationData) {\r\n  const template = document\r\n    .getElementById('weather-template')\r\n    .content.cloneNode(true);\r\n  template.querySelector('.country').innerText = locationData.country;\r\n  template.querySelector(\r\n    '.city__region'\r\n  ).innerText = `${locationData.name} ‚ãÖ ${locationData.region}`;\r\n  template.querySelector('#temp__number').innerText = weatherData.temp;\r\n  template.querySelector('#feels__like--number').innerText =\r\n    weatherData.feelsLikeTemp;\r\n  template.querySelector(\r\n    '.weather__conditions'\r\n  ).innerText = `Conditions: ${weatherData.condition}`;\r\n  template.querySelector('.conditions__image').src = weatherData.conditionImg;\r\n  document.querySelector('#weather__container').appendChild(template);\r\n}\r\n\r\n// forecast weather information\r\nfunction createForecastInfo(weatherForecast) {\r\n  let weekContainer = document.createElement('div');\r\n  weekContainer.classList.add('week__container');\r\n  document.querySelector('#weather__container').appendChild(weekContainer);\r\n  for (let key in weatherForecast) {\r\n    const date = new Date(weatherForecast[key].date),\r\n      day = date.getDay(),\r\n      today = new Date();\r\n    daysOfWeek = [\r\n      'Sunday',\r\n      'Monday',\r\n      'Tuesday',\r\n      'Wednesday',\r\n      'Thursday',\r\n      'Friday',\r\n      'Saturday',\r\n    ];\r\n    const template = document\r\n      .getElementById('weather-forecast')\r\n      .content.cloneNode(true);\r\n    template.querySelector('.forecast__header').innerText =\r\n      today.getDay() === date.getDay() ? 'Today' : daysOfWeek[day];\r\n    template.querySelector('#min__temp').innerText =\r\n      weatherForecast[key].minTemp;\r\n    template.querySelector('#max__temp').innerText =\r\n      weatherForecast[key].maxTemp;\r\n    template.querySelector(\r\n      '.forecast__humidity'\r\n    ).innerText += `${weatherForecast[key].avgHumidity}%`;\r\n    template.querySelector('.forecast__rain').innerText = `Rain: ${\r\n      weatherForecast[key].dailyWillItRain\r\n        ? `${weatherForecast[key].dailyChanceOfRain}% üåßÔ∏è`\r\n        : ` ${weatherForecast[key].dailyChanceOfRain}% ‚õÖ`\r\n    }`;\r\n    template.querySelector('.forecast__image').src =\r\n      weatherForecast[key].condition.icon;\r\n    document.querySelector('.week__container').appendChild(template);\r\n  }\r\n}\r\n\r\nfunction createHourlyForecastInfo(hourlyForecast) {\r\n  let hourlyContainer = document.createElement('div');\r\n  hourlyContainer.classList.add('hourly__container');\r\n  document.querySelector('#weather__container').appendChild(hourlyContainer);\r\n\r\n  for (let key in hourlyForecast) {\r\n    const template = document\r\n      .getElementById('weather-hourly')\r\n      .content.cloneNode(true);\r\n    template.querySelector('.hour__time').innerText = hourlyForecast[key].time;\r\n    template.querySelector('.hour__condition').src =\r\n      hourlyForecast[key].condition;\r\n    template.querySelector('.hour__temperature').innerText =\r\n      hourlyForecast[key].temperature;\r\n    document.querySelector('.hourly__container').appendChild(template);\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://top-weatherapp/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;